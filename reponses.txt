---------------------------
1. Après y avoir connecté un client, quittez votre serveur (Ctrl+C) et relancez le. Que se passe-t-il ?
---------------------------

bind socker_serveur: Address already in use
serv : -1 / client : -1
accept: Bad file descriptor
il y a une erreur : le serveur est deja en cours d'utilisation

---------------------------
2. Changez votre envoi de message de bienvenue pour envoyer les 10 lignes par 10 appels à la fonction write et
ajoutez un petit délai avant l’envoi du message de bienvenue (1 seconde). Puis, exécutez la commande suivante :
nc -z 127.0.0.1 8080. Que se passe-t-il ? Que fait l’option -z de la commande nc (lisez le manuel) ?
---------------------------

La connexion coté client se ferme instantanement et le serveur s'arrête.
L'option -z déconnecte le client, le serveur essaie donc d'écrire sur un client qui est déconnecté et il crash.

---------------------------
3. Exécutez la commande suivante : telnet ::1 8080. Que se passe-t-il ? Pourquoi ?
---------------------------

la commande telnet n'a pas accès au host du server, elle ne se lance pas et produit un message d'erreur
Cela est du au fait que l'option "::1" ferme le port, le serveur n'a donc pas accès au client

---------------------------
4. Lancez deux clients simultanément. Que se passe-t-il ? Pourquoi ?
---------------------------

Le premier client reçoit d'abord ses messages, puis le deuxième une fois que le premier à tout reçu


5.1.2

---------------------------
3. Quel est le message envoyé par le client web ? (commande curl http://localhost:8080/)
---------------------------

GET / HTTP/1.1

---------------------------
4. À l’aide de la RFC, trouvez le nom donné aux trois constituant de la première ligne de la requête envoyée par le
client.
---------------------------

GET : méthode
/ : chemin absolu
HTTP/1.1 : protocole & version du protocole